import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
	variable: "--font-geist-sans",
	subsets: ["latin"],
});

const geistMono = Geist_Mono({
	variable: "--font-geist-mono",
	subsets: ["latin"],
});

export const metadata: Metadata = {
	title: "Create Next App",
	description: "Generated by create next app",
	colorScheme: "light dark", // lightとdarkの両方をサポートすることを示す
};

// このスクリプトは<body>タグやメインのCSSより前に実行される必要がある
const InitializeTheme = () => {
	const script = `
    (function() {
      function getInitialTheme() {
        try {
          const storedTheme = localStorage.getItem('theme');
          if (storedTheme === 'light' || storedTheme === 'dark') {
            return storedTheme;
          }
          // localStorageにない場合はシステムの優先設定を確認
          const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
          return prefersDark ? 'dark' : 'light';
        } catch (e) {
          // localStorageへのアクセスが禁止されている場合など
          return 'light'; // フォールバック
        }
      }
      const theme = getInitialTheme();
      const root = document.documentElement;
      if (theme === 'dark') {
        root.classList.add('dark');
      } else {
        root.classList.remove('dark'); // 明示的に削除する方が安全
      }
      // data-theme属性も設定する場合
      // root.setAttribute('data-theme', theme);

      // color-schemeも同期する場合 (headのmetaタグと合わせる)
      // root.style.colorScheme = theme; // もしくはCSSで :root[data-theme='dark'] { color-scheme: dark; } のように設定
    })();
  `;
	// biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>
	return <script dangerouslySetInnerHTML={{ __html: script }} />;
};

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return (
		<html lang="ja" suppressHydrationWarning>
			<head>
				<InitializeTheme />
			</head>
			<body
				className={`${geistSans.variable} ${geistMono.variable} antialiased`}
			>
				{children}
			</body>
		</html>
	);
}
