import type { Metadata } from "next/dist/types";
import { DotGothic16, Orbit } from "next/font/google";
import localFont from "next/font/local";
import "../globals.css";
import Header from "@/components/header";
import { NextIntlClientProvider, hasLocale } from "next-intl";
import { notFound } from "next/navigation";
import { routing } from "@/i18n/routing";

const dotGothic16 = DotGothic16({
	variable: "--font-dot-gothic-16",
	subsets: ["latin"],
	weight: "400",
	style: "normal",
	display: "swap",
});

const orbit = Orbit({
	variable: "--font-orbit",
	subsets: ["latin"],
	weight: "400",
	style: "normal",
	display: "swap",
});

const departureMono = localFont({
	src: "../../font/DepartureMono-Regular.woff2",
	variable: "--font-departure-mono",
});

export const metadata: Metadata = {
	title: "Create Next App",
	description: "Generated by create next app",
	colorScheme: "light dark", // lightとdarkの両方をサポートすることを示す
};

// このスクリプトは<body>タグやメインのCSSより前に実行される必要がある
const InitializeTheme = () => {
	const script = `
    (function() {
      function getInitialTheme() {
        try {
          const storedTheme = localStorage.getItem('theme');
          if (storedTheme === 'light' || storedTheme === 'dark') {
            return storedTheme;
          }
          // localStorageにない場合はシステムの優先設定を確認
          const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
          return prefersDark ? 'dark' : 'light';
        } catch (e) {
          // localStorageへのアクセスが禁止されている場合など
          return 'light'; // フォールバック
        }
      }
      const theme = getInitialTheme();
      const root = document.documentElement;
      if (theme === 'dark') {
        root.classList.add('dark');
      } else {
        root.classList.remove('dark'); // 明示的に削除する方が安全
      }
      // data-theme属性も設定する場合
      // root.setAttribute('data-theme', theme);

      // color-schemeも同期する場合 (headのmetaタグと合わせる)
      // root.style.colorScheme = theme; // もしくはCSSで :root[data-theme='dark'] { color-scheme: dark; } のように設定
    })();
  `;
	// biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>
	return <script dangerouslySetInnerHTML={{ __html: script }} />;
};

export default async function RootLayout({
	children,
	params,
}: Readonly<{
	children: React.ReactNode;
	params: Promise<{ locale: string }>;
}>) {
	const { locale } = await params;
	if (!hasLocale(routing.locales, locale)) {
		notFound();
	}

	const fontFamilyClass = () => {
		switch (locale) {
			case "ja":
				return "font-ja";
			case "en":
				return "font-en";
			case "ko":
				return "font-ko";
		}
	};

	return (
		<html
			lang={locale}
			suppressHydrationWarning
			className={`${departureMono.variable} ${dotGothic16.variable} ${orbit.variable}`}
		>
			<head>
				<InitializeTheme />
			</head>
			<body className={`${fontFamilyClass()} antialiased h-dvh`}>
				<NextIntlClientProvider>
					<Header />
					<div className="w-full h-full grid grid-cols-[minmax(320px,450px)]  place-content-center place-items-center">
						{children}
					</div>
				</NextIntlClientProvider>
			</body>
		</html>
	);
}
